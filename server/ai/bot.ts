import openai from "./openaiClient";
import { generateIntentPrompt, generateResponsePrompt } from "./promptEngineer";

export async function handleUserQuery(
  question: string,
  context?: any
): Promise<string> {
  try {
    // Step 1: Analyze intent using OpenAI
    const intentPrompt = generateIntentPrompt(question);
    openai.beta.assistants;
    const intentCompletion = await openai.chat.completions.create({
      model: "google/gemini-2.0-flash-exp:free",
      messages: [{ role: "user", content: intentPrompt }],
      max_tokens: 100, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
    });

    if (!intentCompletion.choices || intentCompletion.choices.length === 0) {
      return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!";
    }

    let intentData;
    try {
      // Extract and parse JSON from the raw response
      intentData = extractJson(
        intentCompletion.choices[0].message.content || ""
      );
    } catch (parseError) {
      console.error("Error parsing JSON:", parseError);
      return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    }

    const { intent, orderId } = intentData;

    // Validate order ID match
    if (
      context?.type === "order" &&
      orderId &&
      orderId !== context.data.order_id
    ) {
      return `–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –∑–∞–∫–∞–∑ ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞. ü§î`;
    }

    // Step 2: Generate response based on intent
    const responsePrompt = generateResponsePrompt(intent, context);

    const responseCompletion = await openai.chat.completions.create({
      model: "google/gemini-2.0-flash-exp:free",
      messages: [{ role: "user", content: responsePrompt }],
      max_tokens: 100, // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
    });

    if (
      !responseCompletion.choices ||
      responseCompletion.choices.length === 0
    ) {
      return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!";
    }

    return (
      responseCompletion.choices[0].message.content ||
      "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."
    );
  } catch (error) {
    console.error("Error while processing the request:", error);

    if (error instanceof Error) {
      console.error("Error details:", error.message);
    }

    return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
  }
}

// Helper function to extract JSON from raw text
function extractJson(rawText: string): any {
  try {
    // –ò—â–µ–º JSON –≤ —Ç–µ–∫—Å—Ç–µ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    const jsonMatch = rawText.match(/```json\s*({[\s\S]*?})\s*```/);
    if (!jsonMatch) {
      throw new Error("JSON block not found in the response");
    }

    // –ü–∞—Ä—Å–∏–º JSON
    return JSON.parse(jsonMatch[1]);
  } catch (error) {
    console.error("Error extracting JSON:", error);
    console.error("Raw OpenAI response:", rawText);
    throw error;
  }
}
